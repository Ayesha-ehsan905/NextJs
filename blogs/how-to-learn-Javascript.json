{
    "title": "How to learn JavaScript",
    "content": "<h1>Understanding useMemo and useCallback<\/h1>\r\n\r\n<h1>A roadtrip through two of React&#39;s most notorious hooks<\/h1>\r\n\r\n<h2>The basic idea<\/h2>\r\n\r\n<p>Alright, so let&#39;s start with&nbsp;<code>useMemo<\/code>.<\/p>\r\n\r\n<p>The fundamental idea with&nbsp;<code>useMemo<\/code>&nbsp;is that it allows us to&nbsp;<em>&ldquo;remember&rdquo;<\/em>&nbsp;a computed value between renders.<\/p>\r\n\r\n<p>This definition requires some unpacking. In fact, it requires a pretty sophisticated mental model of how React works! So let&#39;s address that first.<\/p>\r\n\r\n<p>The main thing that React does is keep our UI in sync with our application state. The tool that it uses to do this is called a &ldquo;re-render&rdquo;.<\/p>\r\n\r\n<p>Each re-render is a snapshot of what the application&#39;s UI should look like at a given moment in time, based on the current application state. We can think of it like a stack of photographs, each one capturing how things looked given a specific value for every state variable.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Fundamentally,&nbsp;<code>useMemo<\/code>&nbsp;and&nbsp;<code>useCallback<\/code>&nbsp;are tools built to help us optimize re-renders. They do this in two ways:<\/p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Reducing the amount of work that needs to be done in a given render.<\/p>\r\n\t<\/li>\r\n\t<li>\r\n\t<p>Reducing the number of times that a component needs to re-render.<\/p>\r\n\t<\/li>\r\n<\/ol>\r\n\r\n<p>&nbsp;<\/p>\r\n",
    "author": "Harry bhai",
    "slug":"how-to-learn-JavaScript"
}
